name: CI

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

jobs:
    build:
        name: 'Build and Push'
        runs-on: ${{ matrix.os }}
        outputs:
          docker_tag: ${{ steps.generate_tag.outputs.sha }}

        strategy:
            matrix:
                node-version: [21.6.0]
                os: [ubuntu-latest]

        services:
            db:
                image: rethinkdb:2.4.4-bookworm-slim
                ports:
                    - 28015:28015
                    - 8080:8080

        steps:
            - name: Checkout source code
              uses: actions/checkout@v4
            
            - name: Setup NodeJs
              uses: actions/setup-node@v4
              with:
                node-version: ${{ matrix.node-version }}
                cache: 'npm'
            
            - name: Install dependencies
              run: |
                npm install > install.log 2>&1 || (cat install.log && exit 1)

            - name: Get RethinkDB Container IP
              id: get_rethinkdb_ip
              run: |
                CONTAINER_ID=$(docker ps -q -f ancestor=rethinkdb:2.4.4-bookworm-slim)
                CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
                echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV

            - name: Test RethinkDB Connectivity
              run: |
                until nc -z -v -w30 ${{ env.CONTAINER_IP }} 28015
                do
                  echo "Waiting for RethinkDB to be available..."
                  sleep 5
                done

            - name: Running Tests
              env:
                  RETHINKDB_HOST: db
                  RETHINKDB_PORT: 28015
                  RETHINKDB_PORT_WEB: 8080
              run: npm test > test.log 2>&1 || (cat test.log && exit 1)

            - name: Generate Tag
              id: generate_tag
              run: |
                  SHA=$(echo $GITHUB_SHA | head -c7)
                  echo "sha=$SHA" >> $GITHUB_OUTPUT

            - name: Login into the Container Registry
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKERHUB_USERNAME }}
                password: ${{ secrets.DOCKERHUB_TOKEN }}

            - name: Build Docker Image
              run: docker build -t jlss14-ifal/SuperCalculator:${{ steps.generate_tag.outputs.sha }} .

            - name: Push Docker Image to DockerHub
              run: docker push jlss14-ifal/SuperCalculator:${{ steps.generate_tag.outputs.sha }}

            - name: Build Docker Image
              run: docker build -t SuperCalculator:latest .

            - name: Push Docker Image to DockerHub
              run: docker push jlss14/supercalculator:${{ steps.generate_tag.outputs.sha }}
    
    deploy:
        name: Deploy on Digital Ocean
        runs-on: ubuntu-latest
        needs: build

        steps:
          - name: Checkout source code
            uses: actions/checkout@v4

          - name: Copy docker-compose file via ssh
            uses: appleboy/scp-action@v0.1.7
            with:
              hust: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              password: ${{ secrets.PASSWORD }}
              source: "./compose.yml"
              target: "~/"

          - name: Deploy to Digital Ocean droplet via SSH action
            uses: appleboy/ssh-action@v0.1.3
            with:
              host: ${{ secrets.HOST }}
              username: ${{ secrets.USER }}
              password: ${{ secrets.PASSWORD }}
              envs: GITHUB_SHA
              script: |
                # Extract the ltag on job build
                TAG=${{ needs.build.outputs.docker_tag }}
                # Ceate env file
                [ -e .env ] && rm .env
                touch .env
                echo "DOCKER_IMAGE_TAG=$TAG" > .env
                # Login Docker
                docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
                # Remove Old Containers
                CONTAINERS=${docker ps -a -q}
                if [ -n "$CONTAINERS" ]; then
                  docker rm $CONTAINERS
                else
                  echo " No containers to remove"
                fi
                # Run a new container from a new image
                docker-compose up -d